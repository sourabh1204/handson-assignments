package com.hsbc.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;

import com.hsbc.model.beans.Contact;
import com.hsbc.model.beans.Profile;
import com.hsbc.model.exception.AuthenticationException;
import com.hsbc.model.exception.ContactNotFoundExcepton;
import com.hsbc.model.exception.ProfileNotFoundException;
import com.hsbc.model.utility.DBUtility;

public class JdbcBackedDao implements AppDao {
	
	@Override
	public Profile authenticate(int profileId, String password) throws AuthenticationException {
		Profile profile = null;
		try {
			Connection connection = DBUtility.getConnection();
			String loginQuery = "select * from profile_table where profile_id = ? and password = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(loginQuery);
			preparedStatement.setInt(1, profileId);
			preparedStatement.setString(2, password);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				profile = new Profile();
				profile.setProfileId(resultSet.getInt("profile_id"));
				profile.setName(resultSet.getString("name"));
				profile.setPassword(resultSet.getString("password"));
				profile.setPhone(resultSet.getLong("phone"));
				return profile;
			}
			resultSet.close();
			preparedStatement.close();
			connection.close();
			if(profile == null) {
				throw new AuthenticationException("Sorry Username or Password is Incorrect");
			} 
		} catch(SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return profile;
	}

	@Override
	public Profile storeProfile(Profile profile) {
		try {
			Connection connection = DBUtility.getConnection();
			PreparedStatement sequenceStatement = connection.prepareStatement("values(next value for profile_seq)");
			ResultSet rs = sequenceStatement.executeQuery();
			int seq = 0;
			if(rs.next()) {
				seq = rs.getInt(1);
			} 
			if(seq == 0) {
				// throw some exception to the client
			} 
			PreparedStatement preparedStatement = connection.prepareStatement("insert into profile_table values(?,?,?,?,?)");
			preparedStatement.setInt(1, seq);
			Scanner scanner = new Scanner(System.in);
			System.out.println("Enter name");
			preparedStatement.setString(2, scanner.next());
			System.out.println("Enter password");
			preparedStatement.setString(3, scanner.next());
			System.out.println("Enter phone");
			preparedStatement.setLong(4, scanner.nextLong());
			System.out.println("Enter date of birth");
			preparedStatement.setString(5, scanner.next());
			preparedStatement.executeUpdate();
			System.out.println("Profile created with an id = "+seq);
			scanner.close();
			preparedStatement.close();
			connection.close();
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		return profile;
	}

	@Override
	public Profile updateProfile(int profileId, Profile profile) throws ProfileNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deleteProfile() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Contact addContact(Contact contact) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Contact updateContact(int contactId, Contact contact) throws ContactNotFoundExcepton {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("unused")
	@Override
	public ArrayList<Contact> fetchAll(int profileId) throws ContactNotFoundExcepton {
		ArrayList<Contact> list = new ArrayList<Contact>();
		try {
			Connection connection = DBUtility.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("select * from contact_table where profile_ref = ?");
			preparedStatement.setInt(1, profileId);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				Contact contact = new Contact();
				contact.setContactId(resultSet.getInt("contact_id"));
				contact.setContactName(resultSet.getString("name"));
				contact.setContactNo(resultSet.getLong("phone"));
				list.add(contact);
			}
			resultSet.close();
			preparedStatement.close();
			connection.close();
			if(list == null) {
				throw new ContactNotFoundExcepton(); 
			} else {
				return list;
			}
		}catch(SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public String deleteContact(int contactId) throws ContactNotFoundExcepton {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Profile getProfile(int profileId) throws ProfileNotFoundException {
		Profile profile = null;
		try {
			Connection connection = DBUtility.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("select * from profile_table where profile_id = ?");
			preparedStatement.setInt(1, profileId);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				profile = new Profile();
				profile.setProfileId(resultSet.getInt("profile_id"));
				profile.setName(resultSet.getString("name"));
				profile.setPassword(resultSet.getString("password"));
				profile.setPhone(resultSet.getLong("phone"));
			}
			resultSet.close();
			preparedStatement.close();
			connection.close();
			if(profile == null) {
				throw new ProfileNotFoundException(); 
			} else {
				return profile;
			}
		}catch(SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return profile;
	}

}